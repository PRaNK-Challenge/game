import pygame

#settings
pygame.init()
pygame.font.init()
pygame.mixer.init(frequency=8000)

WIDTH, HEIGHT = 950,600
WIN = pygame.display.set_mode((WIDTH, HEIGHT))

pygame.display.set_caption("Adventure Game!")

FPS = 60

WHITE = (255, 255, 255)
BLACK = (0,0,0)
TRANSPARENT = (0,0,0,0)

ADVENTURE_FONT = pygame.font.SysFont('comicsans', 20)


# Room 1 files
KITCHEN = pygame.transform.scale(pygame.image.load('kitchen.png'), (WIDTH, HEIGHT))
STUDY_ROOM = pygame.transform.scale(pygame.image.load('officelineart.png'), (WIDTH, HEIGHT))
CANDLE = pygame.transform.scale(pygame.image.load('candle.png'), (55,60)).convert_alpha()
BOOK = pygame.transform.scale(pygame.image.load('book.png'), (55,60)).convert_alpha()
OPEN_BOOK = pygame.transform.scale(pygame.image.load('open_book.png'), (600,500)).convert_alpha()
KETTLE = pygame.transform.scale(pygame.image.load('kettle.png'), (55,60)).convert_alpha()
PAN = pygame.transform.scale(pygame.image.load('pan.png'), (55,60)).convert_alpha()
NEXT_BUTTON = pygame.transform.scale(pygame.image.load('next_button.png'), (70,70)).convert_alpha()
TEXT_BOX = pygame.transform.scale(pygame.image.load('text_box.png'), (600,150)).convert_alpha()
PHONE = pygame.transform.scale(pygame.image.load('telephone.png'), (120,100))
TISSUES = pygame.transform.scale(pygame.image.load('tissues.png'), (55,70))
KEY = pygame.transform.scale(pygame.image.load('key.png'), (40,15))
MOTHER = pygame.transform.scale(pygame.image.load('mother.png'), (220,400))
FOLDER = pygame.transform.scale(pygame.image.load('folder.png'), (130, 110))
DRAWER_SHAPE = pygame.transform.scale(pygame.image.load('drawer.png'), (220,100))

# Room 1 sounds
WOMAN = pygame.mixer.Sound('woman.mp3')
LITTLE = pygame.mixer.Sound('little_girl_voice.mp3')
MAN = pygame.mixer.Sound('man_voice.mp3')
PHONE_SOUND = pygame.mixer.Sound('phone-ring.mp3')
PHONE_PICKUP = pygame.mixer.Sound('phone_pick_up.mp3')
HELLO = pygame.mixer.Sound('HELLO.ogg')



#to help fade between scenes, used by rooms and items, change to what's visible at beginning
def redraw_window(room, items):
    WIN.blit(room, (0,0))
    for item in items:
        if item.self_vis == True:
            WIN.blit(item.image, (item.rect.topleft))     
            
#fade between scenes
def fade_in_and_out(width, height, state, room, current_room, next_room): 
    
    fade = pygame.Surface((width, height))
    fade.fill((0,0,0))
    
    for alpha in range(255):
        fade.set_alpha(alpha)
        redraw_window(current_room, current_room.click_clue, current_room.collect_clue, current_room.drag_clue)
        WIN.blit(fade, (0,0))
        pygame.display.update()
        pygame.time.delay(1)
        
    #change to next room    
    room.state = state 
                
    for alpha in range (255): 
        fade.set_alpha(255-alpha)
        redraw_window(next_room, next_room.click_clue, next_room.collect_clue, next_room.drag_clue)
        WIN.blit(fade, (0,0))
        pygame.display.update()
        pygame.time.delay(1)


class Text():
    def __init__(self, text):
        self.text = text
        self.self_vis = False
        
    def draw_text(self):
        display_text = ADVENTURE_FONT.render(
                self.text, 1, BLACK)
        WIN.blit(display_text, (WIDTH/2 - 200, HEIGHT - 100))
        pygame.display.update()
        
    def remove_text(self):
        self.text = ""
        
        
# Parent class for drawing images on screen and checking if they've been clicked
class Clickable():
    def __init__(self, room, x, y, image):
        self.image = image
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.clicked = False
        self.room = room
        self.self_vis = True
    
    def draw(self):
        if self.self_vis == True:
            WIN.blit(self.image, (self.rect.x, self.rect.y))       
            pos = pygame.mouse.get_pos()

            if self.rect.collidepoint(pos) and pygame.mouse.get_pressed()[0]:
                self.clicked=True


# item that fades in
class FadeIn(Clickable):
    def __init__(self, room, x, y, image):
        super().__init__(room, x, y, image)
        self.show_fader = False
        
    def fade_in(self):
        for alpha in range(256):
            self.image.set_alpha(alpha)
            redraw_window(self.room.image, self.room.items)
            WIN.blit(self.image, (self.rect.topleft))
            pygame.display.update()
        if alpha == 255:
            self.show_fader = True


class AudioClue():
    def __init__(self, room, item, sound, pause, second_sound="", func=""):
        self.room = room
        self.item = item
        self.sound = sound
        self.second_sound = second_sound
        self.pause = pause
        self.func = func
        self.arrived = False
        
    def play_sound(self, topleft):        
        # this will stop the sound playing more than once
        if self.sound != "":

            if self.item.rect.collidepoint(topleft) and pygame.mouse.get_pressed()[0] and self.item.rect.topleft == topleft:           
                if self.second_sound == "":
                    pygame.time.delay(self.pause)
                    self.sound.play()
                    if self.func == "":
                        pass
                    else:
                        self.func()
                
                else:
                    self.sound.play()
                    pygame.time.delay(self.pause)
                    self.second_sound.play()
                    pygame.time.delay(int(self.second_sound.get_length()) + 1000)
                    #pass a function that can be called once the sound has finished
                    if self.func == "":
                        pass
                    else:
                        self.func()
                    
                 
# Child class, a clickable item that can be collected, final clue before next room
class CollectableClue(Clickable):
    def __init__(self, room, x, y, image, next_x, next_y):
        super().__init__(room, x, y, image)
        self.next_room_button = Clickable(room, WIDTH - 100, HEIGHT - 100, NEXT_BUTTON)  
        self.next_x = next_x
        self.next_y = next_y
        self.room = room
        self.self_vis = False
        
    def collect(self):
        pos = pygame.mouse.get_pos()
        
        #this will give us which draggables are being clicked so other items don't react when dragged over!
        clicked_items = [item for item in self.room.items if isinstance(item, DraggableClue) and item.clicked == True]

        #control item locations, put into inventory
        if self.rect.collidepoint(pos) and pygame.mouse.get_pressed()[0] and len(clicked_items) == 0:
            self.clicked=True
        
        if self.clicked == True:    
            self.next_room_button.draw()        
      

class DraggableClue(Clickable):
    def __init__(self, room, image, x, y, self_vis, area="", second_image="", func=""):
        super().__init__(room, x, y, image)
        self.area = area
        self.second_image = second_image
        self.room = room
        self.arrived = False
        self.func = func
        self.self_vis = self_vis
        
    def click_and_drag(self):
        pos = pygame.mouse.get_pos()
    
        clicked_items = [item for item in self.room.items if item is not self and isinstance(item, DraggableClue) and item.clicked == True]
        
        if self.clicked == True and len(clicked_items) == 0:
            self.rect.x = pos[0] - self.rect.width/2
            self.rect.y = pos[1] - self.rect.height/2

        if not pygame.mouse.get_pressed()[0]:
            self.clicked = False    
   
        if self.rect.colliderect(self.area):
            if self.func == "":
                pass
            else:
                self.func()    
        
                
# initialise the rooms
class Room1():
    def __init__(self):        
        self.image = STUDY_ROOM
        self.cooldown = 5000
        self.last = pygame.time.get_ticks()
        self.next_room = False
        self.drawer = pygame.draw.rect(WIN, TRANSPARENT, (300,530,50,50))
        self.collect_folder = CollectableClue(self, 246, 409, FOLDER, 50, HEIGHT - 100)
        self.text = Text("She seems upset, maybe give her the tissues and she'll speak?")
        self.mother = FadeIn(self, 600, 100, MOTHER)
        self.phone = Clickable(self, 347, 320, PHONE)
        self.phone_call = AudioClue(self, self.phone, PHONE_PICKUP, 1500, MAN, self.mother.fade_in)
        self.click_tissues = Clickable(self, 183, 361, TISSUES)
        self.mother_speech = AudioClue(self, self.click_tissues, LITTLE, 100)
        self.drag_key = DraggableClue(self, KEY, 190, 410, True, area=self.drawer)
        self.items = [self.drag_key, self.phone, self.click_tissues]

          
    def play_room(self):

        WIN.blit(self.image, (0, 0))
        
        self.phone.draw()
        self.drag_key.draw()
        self.click_tissues.draw()
        self.collect_folder.draw()
        self.collect_folder.collect()
             
        # pause, phone rings, click & answer, man speaks and woman appears
        now = pygame.time.get_ticks()
        if now - self.last >= self.cooldown:
            PHONE_SOUND.play()
            
            if self.phone.clicked == True:
                PHONE_SOUND.stop()
                
                self.phone_call.play_sound((347, 320))
                self.phone_call.sound = ""
 
                if self.mother.show_fader == True:
                    WIN.blit(self.mother.image, (self.mother.rect.topleft))
                    # redraw so it appears in front of self.mother
                    self.click_tissues.draw()
                    self.text.draw_text()
                    
        # give tissues to mother, mother speaks 
        if self.click_tissues.clicked == True:
            self.click_tissues.rect.topleft = (715, 219) #this moves it to her hands
            self.mother_speech.play_sound((715, 219))
            self.mother_speech.sound = ""
        
        # key is revealed, can be moved
        if self.phone.clicked == True and self.click_tissues.clicked == True:
            self.text = Text("Ah, there's the key to the drawer! Let's get that folder")
            self.drag_key.click_and_drag()
        
        # reveal the folder once key reaches drawer
        if self.drag_key.rect.colliderect(self.drawer):
            self.collect_folder.self_vis = True
        
        # collect the folder and put in inventory before going to next room
        if self.collect_folder.clicked == True:
            self.collect_folder.rect.x = self.collect_folder.next_x
            self.collect_folder.rect.y = self.collect_folder.next_y
            self.text.text = "On to the next room!"
            self.drag_key.rect.topleft = (190, 410)
        
        if self.collect_folder.next_room_button.clicked == True:
            self.next_room = True

                   
        pygame.display.update()  
        
"""
class Room2():
    def __init__(self):
        self.image = BEDROOM
        self.cooldown = 3000
        self.last = pygame.time.get_ticks()
        self.next_room = False
"""        
        
        
room1 = Room1()

class GameState():
    
    def __init__(self):
        self.state = 'room1' #or menu
        
    def room1(self):
             
        room1.play_room()
        
        if room1.next_room == True:
            self.state = 'room2'
        
        
    # decides which room to show         
    def state_manager(self):
        #add a start menu screen
        if self.state == 'room1':
            self.room1()
        #if self.state == 'room2':
         #   self.room_1_part_2()
        #etc for all rooms    



#run the whole game

game_state = GameState()  

clock = pygame.time.Clock()
run = True
while run:
    clock.tick(FPS)

    pos = pygame.mouse.get_pos()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False            
            
    game_state.state_manager()
      
pygame.quit()
